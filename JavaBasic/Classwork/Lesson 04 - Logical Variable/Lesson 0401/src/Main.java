/*
Тип boolean
Чтобы было удобно работать с выражениями, которые могут быть истинными или ложными, в Java добавили специальный тип — boolean. Его главная особенность заключается в том, что переменные этого типа могут принимать всего два значения: true (истина) и false (ложь).

Никакие другие значения присвоить переменным типа boolean невозможно. Компилятор не позволит.

В него можно сохранять значения логических выражений. Пример:

boolean isOK = true;

boolean hasError = false;

int age = 70;
boolean isSenior = (age > 65);  //false

int record = 612;
int value = 615;
boolean hasNewRecord = (value > record);  //true

int min = 0;
int max = 100;
int temperature = -20;
boolean isIce = (temperature < min);
boolean isSteam = (temperature > max);
Операторы сравнения
В Java, как и в других языках программирования, часто приходится сравнивать переменные между собой. И именно для сравнения в Java есть такие операторы:

Оператор	Пояснение	Пример
<	Меньше	a < 10
>	Больше	b > a
<=	Меньше или равно	a <= 10
>=	Больше или равно	speed >= max
==	Равно	age == 18
!=	Не равно	time != 0
Результатом действия каждого из приведенных операторов будет логическое выражение. Его можно сохранить в переменную типа boolean, ну или использовать в качестве условия в if.

Операторы, состоящие из двух символов, разрывать нельзя.

a < = 10 — такой код компилироваться не будет.

Условные операторы
От программ было бы мало толку, если бы они делали абсолютно одно и то же независимо от того, как меняются внешние обстоятельства. Программе нужно уметь подстраиваться под обстоятельства, и делать одни действия в одних случаях и другие – в других. В Java это реализовано с помощью «условного оператора» — специального ключевого слова, которое позволяет выполнять разные блоки команд в зависимости от правдивости условия.

Он состоит из трех частей: «условия», «команды 1» и «команды 2». Если условие верно (истинно), тогда выполняется «команда 1», иначе выполняется «команда 2». Команды никогда не выполняются одновременно. Общий вид этого оператора таков:

if (условие) {
  команда_1;
} else {
  команда_2;
}
В качестве условия можно использовать любое выражение или переменную, главное, чтобы результат получился типом boolean.
 */


import java.util.Scanner;
public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        int ageLimit = 18;
        System.out.println("Input age: ");
        int age = scanner.nextInt();

        boolean isAdult = age >= ageLimit;

        System.out.println("The user is adult: " + isAdult);

        // boolean demo1 = 19;                  // error. boolean нужно задавать задачи ответ на которые только true или false

        boolean demo2 = 19/2 > 6;               //true
        boolean demo3 = 19/3 > 6;               // false потому, что система считает по целым числам. По факту это будет 6>6 и это false
        boolean demo4 = 19.0/3 > 6;             // true
        boolean demo5 = isAdult;
        //boolean demo6 = 6 = (18/3);             //тут программа понимает, что мы придаём числу 6 значение 18/3. таким образом она не сработает
        boolean demo6 = 6 == (18/3);            // для того, чтобы программа работала правильно, нужно поставить два ==
        boolean demo7 = ageLimit == 18;         // true. сравнение ageLimit равно 18
        boolean demo8 = ageLimit != 18;         // false. срфвнение ageLimit НЕ равно 18





    }
}